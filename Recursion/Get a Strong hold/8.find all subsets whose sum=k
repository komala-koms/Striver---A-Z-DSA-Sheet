static ArrayList<ArrayList<Integer>> combinationSum(ArrayList<Integer> A, int B)
    {
        
        HashSet<Integer> set = new HashSet<>();
        for(Integer i : A)set.add(i);
        
        ArrayList<Integer> input = new ArrayList<>(set);
        Collections.sort(input);
        
        ArrayList<ArrayList<Integer>> ans = new ArrayList<>();    
        uniqueCombination(0, input, B, new ArrayList<>(), ans);
        
        for(ArrayList<Integer>arr : ans){
            Collections.sort(arr);
        }
        
        return ans;
    }
    
     public static void uniqueCombination(int ind, ArrayList<Integer> arr, int target, List<Integer> ds,  ArrayList<ArrayList<Integer>> ans){
          
        if(target == 0){
            ans.add(new ArrayList<>(ds));
            return;
        }
     
        if(ind < arr.size() && target - arr.get(ind) >= 0){
            ds.add(arr.get(ind));
            uniqueCombination(ind, arr, target-arr.get(ind), ds, ans);
            ds.remove(ds.size()-1);
        }
        
        if(ind+1 < arr.size())    
        uniqueCombination(ind+1, arr, target, ds, ans);     
        return;    
    }
